
-- 1. Выбор всех фильмов на сегодня

EXPLAIN analyse SELECT DISTINCT name Фильм FROM films JOIN sessions s on films.id = s.film_id AND s.date = CURRENT_DATE;


10 000 записей

HashAggregate  (cost=262.73..264.50 rows=177 width=32) (actual time=4.445..4.451 rows=4 loops=1)
  Group Key: films.name
  Batches: 1  Memory Usage: 40kB
  ->  Hash Join  (cost=22.82..262.29 rows=177 width=32) (actual time=0.261..4.286 rows=177 loops=1)
        Hash Cond: ((s.film_id)::text = (films.id)::text)
        ->  Seq Scan on sessions s  (cost=0.00..239.00 rows=177 width=9) (actual time=0.187..3.813 rows=177 loops=1)
              Filter: (date = CURRENT_DATE)
              Rows Removed by Filter: 9823
        ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.044..0.046 rows=5 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.024..0.027 rows=5 loops=1)
Planning Time: 0.419 ms
Execution Time: 4.541 ms

1 000 000 записей

HashAggregate  (cost=18354.21..18356.21 rows=200 width=32) (actual time=185.322..188.854 rows=4 loops=1)
  Group Key: films.name
  Batches: 1  Memory Usage: 40kB
  ->  Gather  (cost=1022.83..18300.29 rows=21567 width=32) (actual time=1.241..176.155 rows=19898 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Hash Join  (cost=22.82..15143.59 rows=8986 width=32) (actual time=0.429..167.612 rows=6633 loops=3)
              Hash Cond: ((s.film_id)::text = (films.id)::text)
              ->  Parallel Seq Scan on sessions s  (cost=0.00..15097.00 rows=8986 width=9) (actual time=0.054..161.508 rows=6633 loops=3)
                    Filter: (date = CURRENT_DATE)
                    Rows Removed by Filter: 326701
              ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.084..0.085 rows=5 loops=3)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.054..0.056 rows=5 loops=3)
Planning Time: 0.542 ms
Execution Time: 188.906 ms




Результат после добавления индекса на sessions(date). Производительность повысилась на 300%.

HashAggregate  (cost=9547.86..9549.86 rows=200 width=32) (actual time=66.716..66.721 rows=4 loops=1)
  Group Key: films.name
  Batches: 1  Memory Usage: 40kB
  ->  Hash Join  (cost=266.40..9493.94 rows=21567 width=32) (actual time=4.246..59.484 rows=19898 loops=1)
        Hash Cond: ((s.film_id)::text = (films.id)::text)
        ->  Bitmap Heap Scan on sessions s  (cost=243.57..9414.08 rows=21567 width=9) (actual time=4.123..49.237 rows=19898 loops=1)
              Recheck Cond: (date = CURRENT_DATE)
              Heap Blocks: exact=7934
              ->  Bitmap Index Scan on sessions_date_idx  (cost=0.00..238.18 rows=21567 width=0) (actual time=2.601..2.602 rows=19898 loops=1)
                    Index Cond: (date = CURRENT_DATE)
        ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.016..0.018 rows=5 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.010..0.011 rows=5 loops=1)
Planning Time: 0.883 ms
Execution Time: 66.793 ms





-- 2. Подсчет проданных билетов за неделю

EXPLAIN analyse SELECT SUM(amount) FROM public.sessions
JOIN tickets t on sessions.id = t.session_id
WHERE date between CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;

Анализ на 10 000 записей:

Aggregate  (cost=537.98..537.99 rows=1 width=32) (actual time=16.785..16.788 rows=1 loops=1)
  ->  Hash Join  (cost=333.76..534.02 rows=1581 width=5) (actual time=10.148..15.370 rows=1614 loops=1)
        Hash Cond: (t.session_id = sessions.id)
        ->  Seq Scan on tickets t  (cost=0.00..174.00 rows=10000 width=9) (actual time=0.050..2.526 rows=10000 loops=1)
        ->  Hash  (cost=314.00..314.00 rows=1581 width=4) (actual time=10.081..10.082 rows=1581 loops=1)
              Buckets: 2048  Batches: 1  Memory Usage: 72kB
              ->  Seq Scan on sessions  (cost=0.00..314.00 rows=1581 width=4) (actual time=0.066..8.986 rows=1581 loops=1)
                    Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                    Rows Removed by Filter: 8419
Planning Time: 0.244 ms
Execution Time: 16.832 ms


------
Анализ на 1 000 000 записей:
------

Finalize Aggregate  (cost=32952.40..32952.41 rows=1 width=32) (actual time=608.220..612.244 rows=1 loops=1)
  ->  Gather  (cost=32952.18..32952.39 rows=2 width=32) (actual time=607.345..611.378 rows=3 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Partial Aggregate  (cost=31952.18..31952.19 rows=1 width=32) (actual time=602.824..602.827 rows=1 loops=3)
              ->  Parallel Hash Join  (cost=19051.34..31784.73 rows=66978 width=5) (actual time=379.312..590.691 rows=52815 loops=3)
                    Hash Cond: (t.session_id = sessions.id)
                    ->  Parallel Seq Scan on tickets t  (cost=0.00..11629.25 rows=420625 width=9) (actual time=0.022..86.975 rows=336500 loops=3)
                    ->  Parallel Hash  (cost=18222.00..18222.00 rows=66347 width=4) (actual time=377.431..377.432 rows=53276 loops=3)
                          Buckets: 262144  Batches: 1  Memory Usage: 8352kB
                          ->  Parallel Seq Scan on sessions  (cost=0.00..18222.00 rows=66347 width=4) (actual time=0.173..326.924 rows=53276 loops=3)
                                Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                Rows Removed by Filter: 280058
Planning Time: 0.473 ms
Execution Time: 612.292 ms



Результат после добавления индекса на sessions(date). Производительность повысилась на 70%.

Finalize Aggregate  (cost=27246.78..27246.79 rows=1 width=32) (actual time=371.575..375.220 rows=1 loops=1)
  ->  Gather  (cost=27246.56..27246.77 rows=2 width=32) (actual time=371.186..375.209 rows=3 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Partial Aggregate  (cost=26246.56..26246.57 rows=1 width=32) (actual time=361.551..361.555 rows=1 loops=3)
              ->  Parallel Hash Join  (cost=13345.72..26079.11 rows=66978 width=5) (actual time=109.804..340.430 rows=52815 loops=3)
                    Hash Cond: (t.session_id = sessions.id)
                    ->  Parallel Seq Scan on tickets t  (cost=0.00..11629.25 rows=420625 width=9) (actual time=0.036..81.964 rows=336500 loops=3)
                    ->  Parallel Hash  (cost=12516.38..12516.38 rows=66347 width=4) (actual time=108.834..108.835 rows=53276 loops=3)
                          Buckets: 262144  Batches: 1  Memory Usage: 8352kB
                          ->  Parallel Bitmap Heap Scan on sessions  (cost=2176.57..12516.38 rows=66347 width=4) (actual time=13.162..79.080 rows=53276 loops=3)
                                Recheck Cond: ((date >= (CURRENT_DATE - '7 days'::interval)) AND (date <= CURRENT_DATE))
                                Heap Blocks: exact=3174
                                ->  Bitmap Index Scan on sessions_date_idx  (cost=0.00..2136.76 rows=159233 width=0) (actual time=16.445..16.445 rows=159827 loops=1)
                                      Index Cond: ((date >= (CURRENT_DATE - '7 days'::interval)) AND (date <= CURRENT_DATE))
Planning Time: 0.649 ms
Execution Time: 375.281 ms



-- 3. Формирование афиши (фильмы, которые показывают сегодня)

SELECT name Фильм,s.timebegin Время_начала FROM films JOIN sessions s on films.id = s.film_id AND s.date = CURRENT_DATE;

Анализ на 10 000 записей:

Hash Join  (cost=22.82..262.29 rows=177 width=40) (actual time=0.025..4.045 rows=177 loops=1)
  Hash Cond: ((s.film_id)::text = (films.id)::text)
  ->  Seq Scan on sessions s  (cost=0.00..239.00 rows=177 width=17) (actual time=0.011..3.878 rows=177 loops=1)
        Filter: (date = CURRENT_DATE)
        Rows Removed by Filter: 9823
  ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.008..0.010 rows=5 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 9kB
        ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.004..0.005 rows=5 loops=1)
Planning Time: 0.104 ms
Execution Time: 4.382 ms


------
Анализ на 1 000 000 записей:
------

Gather  (cost=1022.83..18300.29 rows=21567 width=40) (actual time=0.638..270.639 rows=19898 loops=1)
  Workers Planned: 2
  Workers Launched: 2
  ->  Hash Join  (cost=22.82..15143.59 rows=8986 width=40) (actual time=0.370..230.127 rows=6633 loops=3)
        Hash Cond: ((s.film_id)::text = (films.id)::text)
        ->  Parallel Seq Scan on sessions s  (cost=0.00..15097.00 rows=8986 width=17) (actual time=0.059..215.815 rows=6633 loops=3)
              Filter: (date = CURRENT_DATE)
              Rows Removed by Filter: 326701
        ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.042..0.043 rows=5 loops=3)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.028..0.030 rows=5 loops=3)
Planning Time: 0.351 ms
Execution Time: 272.588 ms



Результат после добавления индекса на sessions(date). Производительность повысилась на 500%.

Hash Join  (cost=266.40..9493.94 rows=21567 width=40) (actual time=4.056..52.960 rows=19898 loops=1)
  Hash Cond: ((s.film_id)::text = (films.id)::text)
  ->  Bitmap Heap Scan on sessions s  (cost=243.57..9414.08 rows=21567 width=17) (actual time=4.026..43.564 rows=19898 loops=1)
        Recheck Cond: (date = CURRENT_DATE)
        Heap Blocks: exact=7934
        ->  Bitmap Index Scan on sessions_date_idx  (cost=0.00..238.18 rows=21567 width=0) (actual time=2.212..2.213 rows=19898 loops=1)
              Index Cond: (date = CURRENT_DATE)
  ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.018..0.019 rows=5 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 9kB
        ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.012..0.013 rows=5 loops=1)
Planning Time: 0.218 ms
Execution Time: 54.228 ms




-- 4. Поиск 3 самых прибыльных фильмов за неделю

EXPLAIN analyse SELECT f.name, SUM(amount) FROM sessions s
JOIN public.tickets t on s.id = t.session_id
JOIN films f on f.id = s.film_id
WHERE date between CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE
GROUP BY f.name ORDER BY sum DESC LIMIT 3
;

Анализ на 10 000 записей:

Limit  (cost=574.02..574.03 rows=3 width=64) (actual time=18.265..18.277 rows=3 loops=1)
  ->  Sort  (cost=574.02..574.52 rows=200 width=64) (actual time=18.262..18.272 rows=3 loops=1)
        Sort Key: (sum(t.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  HashAggregate  (cost=568.94..571.44 rows=200 width=64) (actual time=18.238..18.251 rows=4 loops=1)
              Group Key: f.name
              Batches: 1  Memory Usage: 40kB
              ->  Hash Join  (cost=356.59..561.03 rows=1581 width=37) (actual time=12.626..17.406 rows=1614 loops=1)
                    Hash Cond: ((s.film_id)::text = (f.id)::text)
                    ->  Hash Join  (cost=333.76..534.02 rows=1581 width=14) (actual time=12.591..16.556 rows=1614 loops=1)
                          Hash Cond: (t.session_id = s.id)
                          ->  Seq Scan on tickets t  (cost=0.00..174.00 rows=10000 width=9) (actual time=0.006..1.212 rows=10000 loops=1)
                          ->  Hash  (cost=314.00..314.00 rows=1581 width=13) (actual time=12.563..12.566 rows=1581 loops=1)
                                Buckets: 2048  Batches: 1  Memory Usage: 87kB
                                ->  Seq Scan on sessions s  (cost=0.00..314.00 rows=1581 width=13) (actual time=0.010..11.180 rows=1581 loops=1)
                                      Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                      Rows Removed by Filter: 8419
                    ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.023..0.024 rows=5 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.017..0.019 rows=5 loops=1)
Planning Time: 0.377 ms
Execution Time: 18.439 ms



------
Анализ на 1 000 000 записей:
------

Limit  (cost=33384.50..33384.50 rows=3 width=64) (actual time=933.325..940.184 rows=3 loops=1)
  ->  Sort  (cost=33384.50..33385.00 rows=200 width=64) (actual time=933.323..940.180 rows=3 loops=1)
        Sort Key: (sum(t.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  Finalize GroupAggregate  (cost=33329.74..33381.91 rows=200 width=64) (actual time=933.244..940.119 rows=4 loops=1)
              Group Key: f.name
              ->  Gather Merge  (cost=33329.74..33376.41 rows=400 width=64) (actual time=933.218..940.084 rows=12 loops=1)
                    Workers Planned: 2
                    Workers Launched: 2
                    ->  Sort  (cost=32329.72..32330.22 rows=200 width=64) (actual time=921.412..921.420 rows=4 loops=3)
                          Sort Key: f.name
                          Sort Method: quicksort  Memory: 25kB
                          Worker 0:  Sort Method: quicksort  Memory: 25kB
                          Worker 1:  Sort Method: quicksort  Memory: 25kB
                          ->  Partial HashAggregate  (cost=32319.57..32322.07 rows=200 width=64) (actual time=921.134..921.144 rows=4 loops=3)
                                Group Key: f.name
                                Batches: 1  Memory Usage: 40kB
                                Worker 0:  Batches: 1  Memory Usage: 40kB
                                Worker 1:  Batches: 1  Memory Usage: 40kB
                                ->  Hash Join  (cost=19074.16..31984.68 rows=66978 width=37) (actual time=417.905..841.730 rows=52815 loops=3)
                                      Hash Cond: ((s.film_id)::text = (f.id)::text)
                                      ->  Parallel Hash Join  (cost=19051.34..31784.73 rows=66978 width=14) (actual time=417.816..794.756 rows=52815 loops=3)
                                            Hash Cond: (t.session_id = s.id)
                                            ->  Parallel Seq Scan on tickets t  (cost=0.00..11629.25 rows=420625 width=9) (actual time=0.007..118.607 rows=336500 loops=3)
                                            ->  Parallel Hash  (cost=18222.00..18222.00 rows=66347 width=13) (actual time=416.287..416.288 rows=53276 loops=3)
                                                  Buckets: 262144  Batches: 1  Memory Usage: 9920kB
                                                  ->  Parallel Seq Scan on sessions s  (cost=0.00..18222.00 rows=66347 width=13) (actual time=0.036..363.306 rows=53276 loops=3)
                                                        Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                                        Rows Removed by Filter: 280058
                                      ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.034..0.035 rows=5 loops=3)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.022..0.024 rows=5 loops=3)
Planning Time: 0.733 ms
Execution Time: 940.327 ms



Результат после добавления индекса на sessions(date). Производительность повысилась на 80%.

Limit  (cost=27678.88..27678.88 rows=3 width=64) (actual time=533.943..537.554 rows=3 loops=1)
  ->  Sort  (cost=27678.88..27679.38 rows=200 width=64) (actual time=533.941..537.550 rows=3 loops=1)
        Sort Key: (sum(t.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  Finalize GroupAggregate  (cost=27624.12..27676.29 rows=200 width=64) (actual time=533.912..537.539 rows=4 loops=1)
              Group Key: f.name
              ->  Gather Merge  (cost=27624.12..27670.79 rows=400 width=64) (actual time=533.884..537.503 rows=12 loops=1)
                    Workers Planned: 2
                    Workers Launched: 2
                    ->  Sort  (cost=26624.10..26624.60 rows=200 width=64) (actual time=501.206..501.214 rows=4 loops=3)
                          Sort Key: f.name
                          Sort Method: quicksort  Memory: 25kB
                          Worker 0:  Sort Method: quicksort  Memory: 25kB
                          Worker 1:  Sort Method: quicksort  Memory: 25kB
                          ->  Partial HashAggregate  (cost=26613.95..26616.45 rows=200 width=64) (actual time=501.032..501.041 rows=4 loops=3)
                                Group Key: f.name
                                Batches: 1  Memory Usage: 40kB
                                Worker 0:  Batches: 1  Memory Usage: 40kB
                                Worker 1:  Batches: 1  Memory Usage: 40kB
                                ->  Hash Join  (cost=13368.54..26279.06 rows=66978 width=37) (actual time=118.176..445.440 rows=52815 loops=3)
                                      Hash Cond: ((s.film_id)::text = (f.id)::text)
                                      ->  Parallel Hash Join  (cost=13345.72..26079.11 rows=66978 width=14) (actual time=118.078..402.256 rows=52815 loops=3)
                                            Hash Cond: (t.session_id = s.id)
                                            ->  Parallel Seq Scan on tickets t  (cost=0.00..11629.25 rows=420625 width=9) (actual time=0.016..100.991 rows=336500 loops=3)
                                            ->  Parallel Hash  (cost=12516.38..12516.38 rows=66347 width=13) (actual time=116.553..116.554 rows=53276 loops=3)
                                                  Buckets: 262144  Batches: 1  Memory Usage: 9920kB
                                                  ->  Parallel Bitmap Heap Scan on sessions s  (cost=2176.57..12516.38 rows=66347 width=13) (actual time=14.562..76.659 rows=53276 loops=3)
                                                        Recheck Cond: ((date >= (CURRENT_DATE - '7 days'::interval)) AND (date <= CURRENT_DATE))
                                                        Heap Blocks: exact=2916
                                                        ->  Bitmap Index Scan on sessions_date_idx  (cost=0.00..2136.76 rows=159233 width=0) (actual time=15.257..15.258 rows=159827 loops=1)
                                                              Index Cond: ((date >= (CURRENT_DATE - '7 days'::interval)) AND (date <= CURRENT_DATE))
                                      ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.034..0.035 rows=5 loops=3)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.024..0.026 rows=5 loops=3)
Planning Time: 0.725 ms
Execution Time: 538.107 ms



-- 5. Сформировать схему зала и показать на ней свободные и занятые места на конкретный сеанс (как сделать компактнее не придумал)

EXPLAIN analyse SELECT DISTINCT s.id, s.row, s.seat,
CASE WHEN s.id = t.seat_id THEN true ELSE false END AS Занятые_места
FROM seats s
JOIN tickets t on t.session_id = '1'
EXCEPT
SELECT DISTINCT s.id, s.row, s.seat, false FROM seats s
JOIN tickets t on t.session_id = '1'
WHERE s.id = t.seat_id
;

------
Анализ на 10 000 записей:
------

HashSetOp Except  (cost=872.98..1110.30 rows=622 width=17) (actual time=46.189..46.267 rows=311 loops=1)
  ->  Append  (cost=872.98..1103.22 rows=708 width=17) (actual time=38.484..45.895 rows=463 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=872.98..886.97 rows=622 width=17) (actual time=38.482..39.243 rows=387 loops=1)"
              ->  HashAggregate  (cost=872.98..880.75 rows=622 width=13) (actual time=38.479..39.053 rows=387 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=0.00..605.52 rows=26746 width=13) (actual time=0.076..19.570 rows=26746 loops=1)
                          ->  Seq Scan on seats s  (cost=0.00..5.11 rows=311 width=12) (actual time=0.020..0.545 rows=311 loops=1)
                          ->  Materialize  (cost=0.00..199.43 rows=86 width=4) (actual time=0.000..0.027 rows=86 loops=311)
                                ->  Seq Scan on tickets t  (cost=0.00..199.00 rows=86 width=4) (actual time=0.049..4.544 rows=86 loops=1)
                                      Filter: (session_id = 1)
                                      Rows Removed by Filter: 9914
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=210.99..212.71 rows=86 width=17) (actual time=6.516..6.585 rows=76 loops=1)"
              ->  Unique  (cost=210.99..211.85 rows=86 width=13) (actual time=6.511..6.561 rows=76 loops=1)
                    ->  Sort  (cost=210.99..211.20 rows=86 width=13) (actual time=6.505..6.526 rows=86 loops=1)
"                          Sort Key: s_1.id, s_1.""row"", s_1.seat"
                          Sort Method: quicksort  Memory: 29kB
                          ->  Hash Join  (cost=9.00..208.22 rows=86 width=13) (actual time=0.252..5.177 rows=86 loops=1)
                                Hash Cond: (t_1.seat_id = s_1.id)
                                ->  Seq Scan on tickets t_1  (cost=0.00..199.00 rows=86 width=4) (actual time=0.085..4.224 rows=86 loops=1)
                                      Filter: (session_id = 1)
                                      Rows Removed by Filter: 9914
                                ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.150..0.154 rows=311 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                      ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.015..0.079 rows=311 loops=1)
Planning Time: 0.436 ms
Execution Time: 46.836 ms

------
Анализ на 1 000 000 записей:
------

HashSetOp Except  (cost=70290.58..84823.70 rows=622 width=17) (actual time=1748.257..1751.413 rows=311 loops=1)
  ->  Append  (cost=70290.58..84811.26 rows=1244 width=17) (actual time=1679.778..1751.046 rows=931 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=70290.58..70304.58 rows=622 width=17) (actual time=1679.776..1680.155 rows=621 loops=1)"
              ->  HashAggregate  (cost=70290.58..70298.36 rows=622 width=13) (actual time=1679.774..1680.061 rows=621 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=1000.15..47948.34 rows=2234224 width=13) (actual time=0.409..840.842 rows=2266257 loops=1)
                          ->  Index Scan using seats_pkey on seats s  (cost=0.15..17.81 rows=311 width=12) (actual time=0.018..3.445 rows=311 loops=1)
                          ->  Materialize  (cost=1000.00..14435.13 rows=7184 width=4) (actual time=0.002..0.930 rows=7287 loops=311)
                                ->  Gather  (cost=1000.00..14399.21 rows=7184 width=4) (actual time=0.381..66.407 rows=7287 loops=1)
                                      Workers Planned: 2
                                      Workers Launched: 2
                                      ->  Parallel Seq Scan on tickets t  (cost=0.00..12680.81 rows=2993 width=4) (actual time=0.043..65.981 rows=2429 loops=3)
                                            Filter: (session_id = 1)
                                            Rows Removed by Filter: 334071
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=14488.02..14500.46 rows=622 width=17) (actual time=67.179..70.597 rows=310 loops=1)"
              ->  HashAggregate  (cost=14488.02..14494.24 rows=622 width=13) (actual time=67.177..70.518 rows=310 loops=1)
"                    Group Key: s_1.id, s_1.""row"", s_1.seat, (false)"
                    Batches: 1  Memory Usage: 57kB
                    ->  Gather  (cost=1009.00..14416.18 rows=7184 width=13) (actual time=1.262..65.258 rows=7287 loops=1)
                          Workers Planned: 2
                          Workers Launched: 2
                          ->  Hash Join  (cost=9.00..12697.78 rows=2993 width=13) (actual time=0.409..58.352 rows=2429 loops=3)
                                Hash Cond: (t_1.seat_id = s_1.id)
                                ->  Parallel Seq Scan on tickets t_1  (cost=0.00..12680.81 rows=2993 width=4) (actual time=0.035..55.647 rows=2429 loops=3)
                                      Filter: (session_id = 1)
                                      Rows Removed by Filter: 334071
                                ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.198..0.199 rows=311 loops=3)
                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                      ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.024..0.101 rows=311 loops=3)
Planning Time: 0.651 ms
Execution Time: 1751.732 ms



Результат после добавления индекса на sessions(date) и tickets(session_id). Производительность повысилась на 20%.

HashSetOp Except  (cost=63701.36..71656.40 rows=622 width=17) (actual time=1463.558..1463.589 rows=311 loops=1)
  ->  Append  (cost=63701.36..71643.96 rows=1244 width=17) (actual time=1452.128..1463.341 rows=931 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=63701.36..63715.36 rows=622 width=17) (actual time=1452.127..1452.339 rows=621 loops=1)"
              ->  HashAggregate  (cost=63701.36..63709.14 rows=622 width=13) (actual time=1452.126..1452.255 rows=621 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=84.25..41359.12 rows=2234224 width=13) (actual time=1.246..713.128 rows=2266257 loops=1)
                          ->  Index Scan using seats_pkey on seats s  (cost=0.15..17.81 rows=311 width=12) (actual time=0.013..3.955 rows=311 loops=1)
                          ->  Materialize  (cost=84.10..7845.91 rows=7184 width=4) (actual time=0.004..0.699 rows=7287 loops=311)
                                ->  Bitmap Heap Scan on tickets t  (cost=84.10..7809.99 rows=7184 width=4) (actual time=1.224..17.570 rows=7287 loops=1)
                                      Recheck Cond: (session_id = 1)
                                      Heap Blocks: exact=4633
                                      ->  Bitmap Index Scan on tickets_session_id_idx  (cost=0.00..82.30 rows=7184 width=0) (actual time=0.616..0.616 rows=7287 loops=1)
                                            Index Cond: (session_id = 1)
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=7909.94..7922.38 rows=622 width=17) (actual time=10.809..10.917 rows=310 loops=1)"
              ->  HashAggregate  (cost=7909.94..7916.16 rows=622 width=13) (actual time=10.808..10.872 rows=310 loops=1)
"                    Group Key: s_1.id, s_1.""row"", s_1.seat, false"
                    Batches: 1  Memory Usage: 57kB
                    ->  Hash Join  (cost=93.10..7838.10 rows=7184 width=13) (actual time=1.244..8.733 rows=7287 loops=1)
                          Hash Cond: (t_1.seat_id = s_1.id)
                          ->  Bitmap Heap Scan on tickets t_1  (cost=84.10..7809.99 rows=7184 width=4) (actual time=1.041..5.981 rows=7287 loops=1)
                                Recheck Cond: (session_id = 1)
                                Heap Blocks: exact=4633
                                ->  Bitmap Index Scan on tickets_session_id_idx  (cost=0.00..82.30 rows=7184 width=0) (actual time=0.482..0.482 rows=7287 loops=1)
                                      Index Cond: (session_id = 1)
                          ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.129..0.129 rows=311 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.015..0.084 rows=311 loops=1)
Planning Time: 0.869 ms
Execution Time: 1464.262 ms




-- 6. Вывести диапазон минимальной и максимальной цены за билет на конкретный сеанс

SELECT f.name Фильм, ss.timebegin Начало_сеанса, MIN(v.value_float) Мин_цена, MAX(v.value_float) Макс_цена  FROM sessions ss
    JOIN films f ON ss.film_id = f.id
    JOIN values v on f.id = v.film_id AND v.attribute_id LIKE 'seat_price%'
WHERE ss.id = '1'
GROUP BY f.name, ss.timebegin;

Анализ на 10 000 записей (применяются базовые индексы на pkey):

GroupAggregate  (cost=17.87..17.90 rows=1 width=104) (actual time=0.291..0.293 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=17.87..17.88 rows=1 width=45) (actual time=0.228..0.282 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.44..17.86 rows=1 width=45) (actual time=0.103..0.115 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.29..10.30 rows=2 width=32) (actual time=0.077..0.084 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.29..8.30 rows=1 width=17) (actual time=0.040..0.041 rows=1 loops=1)
                          Index Cond: (id = 1)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.028..0.036 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.013..0.013 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 0.812 ms
Execution Time: 0.441 ms



------
Анализ на 1 000 000 записей (применяются базовые индексы на pkey):
------

GroupAggregate  (cost=18.01..18.04 rows=1 width=104) (actual time=0.588..0.590 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=18.01..18.02 rows=1 width=45) (actual time=0.511..0.513 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.57..18.00 rows=1 width=45) (actual time=0.479..0.501 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.42..10.44 rows=2 width=32) (actual time=0.365..0.375 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.42..8.44 rows=1 width=17) (actual time=0.019..0.021 rows=1 loops=1)
                          Index Cond: (id = 1)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.333..0.345 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.056..0.057 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 0.535 ms
Execution Time: 0.647 ms





Оптимизации: Производительность не отличается, так как используются стандартные индексы *_pkey.

GroupAggregate  (cost=18.01..18.04 rows=1 width=104) (actual time=0.261..0.265 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=18.01..18.02 rows=1 width=45) (actual time=0.223..0.226 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.57..18.00 rows=1 width=45) (actual time=0.156..0.185 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.42..10.44 rows=2 width=32) (actual time=0.123..0.139 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.42..8.44 rows=1 width=17) (actual time=0.066..0.070 rows=1 loops=1)
                          Index Cond: (id = 1)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.046..0.055 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.018..0.018 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 1.242 ms
Execution Time: 0.643 ms




-- 7. Cписок (15 значений) самых больших по размеру объектов БД

public.tickets,                     1312 kB,    712 kB
pg_toast.pg_toast_2618,             528 kB,     480 kB
public.tickets_amount_date_idx,     328 kB,     328 kB
public.tickets_pkey,                240 kB,     240 kB
pg_toast.pg_toast_2619,             72 kB,      24 kB
public.seats,                       56 kB,      16 kB
public.orders,                      40 kB,      8192 bytes
public.films,                       32 kB,      8192 bytes
public.film_attributes,             32 kB,      8192 bytes
public.sessions,                    24 kB,      8192 bytes
public.film_attribute_types,        24 kB,      8192 bytes
public.film_attributes_pkey,        16 kB,      16 kB
public.values,                      16 kB,      8192 bytes
public.seats_pkey,                  16 kB,      16 kB
public.films_pkey,                  16 kB,      16 kB

-- 8. Cписки (по 5 значений) самых часто и редко используемых индексов

SELECT relname,indexrelname,idx_scan FROM pg_stat_user_indexes ORDER BY idx_scan DESC LIMIT 5;

sessions,           sessions_pkey,          23006
seats,              seats_pkey,             12008
orders,             orders_payer_key,       11100
films,              films_pkey,             92
film_attributes,    film_attributes_pkey,   70
