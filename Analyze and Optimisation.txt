
-- 1. Выбор всех фильмов на сегодня

EXPLAIN analyse SELECT DISTINCT name Фильм FROM films JOIN sessions s on films.id = s.film_id AND s.date = CURRENT_DATE;

Анализ на 10 000 записей:

Unique  (cost=27.22..27.26 rows=8 width=32) (actual time=0.159..0.165 rows=4 loops=1)
  ->  Sort  (cost=27.22..27.24 rows=8 width=32) (actual time=0.158..0.160 rows=8 loops=1)
        Sort Key: films.name
        Sort Method: quicksort  Memory: 25kB
        ->  Hash Join  (cost=4.20..27.10 rows=8 width=32) (actual time=0.113..0.119 rows=8 loops=1)
              Hash Cond: ((films.id)::text = (s.film_id)::text)
              ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.041..0.042 rows=5 loops=1)
              ->  Hash  (cost=4.10..4.10 rows=8 width=10) (actual time=0.064..0.064 rows=8 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on sessions s  (cost=0.00..4.10 rows=8 width=10) (actual time=0.018..0.059 rows=8 loops=1)
                          Filter: (date = CURRENT_DATE)
                          Rows Removed by Filter: 132
Planning Time: 0.690 ms
Execution Time: 0.214 ms

------
Анализ на 1 000 000 записей:
------

HashAggregate  (cost=38.58..40.58 rows=200 width=32) (actual time=0.109..0.113 rows=5 loops=1)
  Group Key: films.name
  Batches: 1  Memory Usage: 40kB
  ->  Hash Join  (cost=22.82..37.63 rows=380 width=32) (actual time=0.093..0.101 rows=10 loops=1)
        Hash Cond: ((s.film_id)::text = (films.id)::text)
        ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=82) (actual time=0.046..0.048 rows=10 loops=1)
        ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.027..0.027 rows=5 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.020..0.022 rows=5 loops=1)
Planning Time: 0.533 ms
Execution Time: 0.316 ms

Оптимизации: Запросы выполняются менее 0.1 секунды.



-- 2. Подсчет проданных билетов за неделю

SELECT SUM(amount) FROM tickets WHERE date between CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;

Анализ на 10 000 записей:

Aggregate  (cost=333.88..333.89 rows=1 width=32) (actual time=12.150..12.155 rows=1 loops=1)
  ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=5) (actual time=0.016..9.450 rows=7953 loops=1)
        Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
        Rows Removed by Filter: 2047
Planning Time: 0.141 ms
Execution Time: 12.205 ms


------
Анализ на 1 000 000 записей:
------

Aggregate  (cost=333.88..333.89 rows=1 width=32) (actual time=8.336..8.337 rows=1 loops=1)
  ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=5) (actual time=0.017..6.598 rows=7953 loops=1)
        Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
        Rows Removed by Filter: 2047
Planning Time: 0.206 ms
Execution Time: 8.401 ms


Оптимизации: После добавления индекса на поля tickets.amount и date план не изменился.

Aggregate  (cost=333.88..333.89 rows=1 width=32) (actual time=9.076..9.078 rows=1 loops=1)
  ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=5) (actual time=0.015..7.392 rows=7953 loops=1)
        Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
        Rows Removed by Filter: 2047
Planning Time: 0.452 ms
Execution Time: 9.107 ms


-- 3. Формирование афиши (фильмы, которые показывают сегодня)

SELECT name Фильм,s.timebegin Время_начала FROM films JOIN sessions s on films.id = s.film_id;

Анализ на 10 000 записей:

Hash Join  (cost=22.82..37.63 rows=380 width=40) (actual time=0.054..0.113 rows=10 loops=1)
  Hash Cond: ((s.film_id)::text = (films.id)::text)
  ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=90) (actual time=0.015..0.039 rows=10 loops=1)
  ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.013..0.014 rows=5 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 9kB
        ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.006..0.007 rows=5 loops=1)
Planning Time: 0.203 ms
Execution Time: 0.145 ms


------
Анализ на 1 000 000 записей:
------

Hash Join  (cost=22.82..37.63 rows=380 width=40) (actual time=0.027..0.032 rows=10 loops=1)
  Hash Cond: ((s.film_id)::text = (films.id)::text)
  ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=90) (actual time=0.009..0.010 rows=10 loops=1)
  ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.009..0.010 rows=5 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 9kB
        ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.005..0.006 rows=5 loops=1)
Planning Time: 0.103 ms
Execution Time: 0.054 ms

Оптимизации: Запросы выполняются менее 0.1 секунды. При добавленном индексе на sessions.id план не изменился.

Hash Join  (cost=22.82..37.63 rows=380 width=40) (actual time=0.024..0.029 rows=10 loops=1)
  Hash Cond: ((s.film_id)::text = (films.id)::text)
  ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=90) (actual time=0.009..0.011 rows=10 loops=1)
  ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.008..0.009 rows=5 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 9kB
        ->  Seq Scan on films  (cost=0.00..15.70 rows=570 width=114) (actual time=0.004..0.005 rows=5 loops=1)
Planning Time: 0.199 ms
Execution Time: 0.049 ms


-- 4. Поиск 3 самых прибыльных фильмов за неделю

SELECT f.name, SUM(amount) FROM tickets
    JOIN sessions s on tickets.session_id = s.id
    JOIN films f on f.id = s.film_id
WHERE date between CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE
GROUP BY f.name ORDER BY sum DESC LIMIT 3
;

Анализ на 10 000 записей:

Limit  (cost=442.37..442.38 rows=3 width=64) (actual time=20.854..20.867 rows=3 loops=1)
  ->  Sort  (cost=442.37..442.87 rows=200 width=64) (actual time=20.852..20.862 rows=3 loops=1)
        Sort Key: (sum(tickets.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  HashAggregate  (cost=437.28..439.78 rows=200 width=64) (actual time=20.818..20.835 rows=5 loops=1)
              Group Key: f.name
              Batches: 1  Memory Usage: 40kB
              ->  Hash Join  (cost=41.38..397.52 rows=7953 width=37) (actual time=0.080..16.452 rows=7953 loops=1)
                    Hash Cond: ((s.film_id)::text = (f.id)::text)
                    ->  Hash Join  (cost=18.55..353.66 rows=7953 width=87) (actual time=0.023..13.146 rows=7953 loops=1)
                          Hash Cond: ((tickets.session_id)::text = (s.id)::text)
                          ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=16) (actual time=0.010..8.877 rows=7953 loops=1)
                                Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                Rows Removed by Filter: 2047
                          ->  Hash  (cost=13.80..13.80 rows=380 width=164) (actual time=0.008..0.010 rows=10 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=164) (actual time=0.003..0.005 rows=10 loops=1)
                    ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.039..0.041 rows=5 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.033..0.036 rows=5 loops=1)
Planning Time: 0.283 ms
Execution Time: 20.950 ms



------
Анализ на 1 000 000 записей:
------

Limit  (cost=442.37..442.38 rows=3 width=64) (actual time=23.871..23.928 rows=3 loops=1)
  ->  Sort  (cost=442.37..442.87 rows=200 width=64) (actual time=23.866..23.918 rows=3 loops=1)
        Sort Key: (sum(tickets.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  HashAggregate  (cost=437.28..439.78 rows=200 width=64) (actual time=23.786..23.847 rows=5 loops=1)
              Group Key: f.name
              Batches: 1  Memory Usage: 40kB
              ->  Hash Join  (cost=41.38..397.52 rows=7953 width=37) (actual time=0.157..19.228 rows=7953 loops=1)
                    Hash Cond: ((s.film_id)::text = (f.id)::text)
                    ->  Hash Join  (cost=18.55..353.66 rows=7953 width=87) (actual time=0.071..15.382 rows=7953 loops=1)
                          Hash Cond: ((tickets.session_id)::text = (s.id)::text)
                          ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=16) (actual time=0.008..9.431 rows=7953 loops=1)
                                Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                Rows Removed by Filter: 2047
                          ->  Hash  (cost=13.80..13.80 rows=380 width=164) (actual time=0.018..0.021 rows=10 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=164) (actual time=0.012..0.014 rows=10 loops=1)
                    ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.052..0.053 rows=5 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.011..0.013 rows=5 loops=1)
Planning Time: 0.310 ms
Execution Time: 24.001 ms


Оптимизации: Запросы выполняются менее 1 секунды. Добавлен индекс на таблицу tickets(amount,date).

Limit  (cost=442.37..442.38 rows=3 width=64) (actual time=35.868..35.880 rows=3 loops=1)
  ->  Sort  (cost=442.37..442.87 rows=200 width=64) (actual time=35.860..35.869 rows=3 loops=1)
        Sort Key: (sum(tickets.amount)) DESC
        Sort Method: quicksort  Memory: 25kB
        ->  HashAggregate  (cost=437.28..439.78 rows=200 width=64) (actual time=35.812..35.828 rows=5 loops=1)
              Group Key: f.name
              Batches: 1  Memory Usage: 40kB
              ->  Hash Join  (cost=41.38..397.52 rows=7953 width=37) (actual time=0.281..29.543 rows=7953 loops=1)
                    Hash Cond: ((s.film_id)::text = (f.id)::text)
                    ->  Hash Join  (cost=18.55..353.66 rows=7953 width=87) (actual time=0.148..24.961 rows=7953 loops=1)
                          Hash Cond: ((tickets.session_id)::text = (s.id)::text)
                          ->  Seq Scan on tickets  (cost=0.00..314.00 rows=7953 width=16) (actual time=0.049..19.261 rows=7953 loops=1)
                                Filter: ((date <= CURRENT_DATE) AND (date >= (CURRENT_DATE - '7 days'::interval)))
                                Rows Removed by Filter: 2047
                          ->  Hash  (cost=13.80..13.80 rows=380 width=164) (actual time=0.061..0.065 rows=10 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on sessions s  (cost=0.00..13.80 rows=380 width=164) (actual time=0.030..0.040 rows=10 loops=1)
                    ->  Hash  (cost=15.70..15.70 rows=570 width=114) (actual time=0.100..0.101 rows=5 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on films f  (cost=0.00..15.70 rows=570 width=114) (actual time=0.076..0.081 rows=5 loops=1)
Planning Time: 1.709 ms
Execution Time: 39.237 ms






-- 5. Сформировать схему зала и показать на ней свободные и занятые места на конкретный сеанс (как сделать компактнее не придумал)

SELECT DISTINCT s.id, s.row, s.seat,
    CASE WHEN s.id = t.seat_id THEN true ELSE false END AS Занятые_места
    FROM seats s
    JOIN tickets t on t.date = CURRENT_DATE + INTERVAL '1 days' AND t.session_id = 'last_samurai_10'
EXCEPT
SELECT DISTINCT s.id, s.row, s.seat, false FROM seats s
    JOIN tickets t on t.date = CURRENT_DATE + INTERVAL '1 days' AND t.session_id = 'last_samurai_10'
    WHERE s.id = t.seat_id
;

------
Анализ на 10 000 записей:
------

HashSetOp Except  (cost=1196.30..1525.96 rows=622 width=17) (actual time=36.905..36.937 rows=311 loops=1)
  ->  Append  (cost=1196.30..1518.58 rows=738 width=17) (actual time=34.855..36.756 rows=507 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=1196.30..1210.30 rows=622 width=17) (actual time=34.854..35.078 rows=409 loops=1)"
              ->  HashAggregate  (cost=1196.30..1204.08 rows=622 width=13) (actual time=34.852..35.019 rows=409 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=0.00..835.54 rows=36076 width=13) (actual time=0.029..17.592 rows=36076 loops=1)
                          ->  Seq Scan on seats s  (cost=0.00..5.11 rows=311 width=12) (actual time=0.010..0.350 rows=311 loops=1)
                          ->  Materialize  (cost=0.00..289.58 rows=116 width=4) (actual time=0.000..0.021 rows=116 loops=311)
                                ->  Seq Scan on tickets t  (cost=0.00..289.00 rows=116 width=4) (actual time=0.015..1.799 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=302.28..304.60 rows=116 width=17) (actual time=1.576..1.628 rows=98 loops=1)"
              ->  Unique  (cost=302.28..303.44 rows=116 width=13) (actual time=1.574..1.608 rows=98 loops=1)
                    ->  Sort  (cost=302.28..302.57 rows=116 width=13) (actual time=1.572..1.584 rows=116 loops=1)
"                          Sort Key: s_1.id, s_1.""row"", s_1.seat"
                          Sort Method: quicksort  Memory: 30kB
                          ->  Hash Join  (cost=9.00..298.30 rows=116 width=13) (actual time=0.144..1.530 rows=116 loops=1)
                                Hash Cond: (t_1.seat_id = s_1.id)
                                ->  Seq Scan on tickets t_1  (cost=0.00..289.00 rows=116 width=4) (actual time=0.034..1.365 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
                                ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.100..0.101 rows=311 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                      ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.012..0.052 rows=311 loops=1)
Planning Time: 0.414 ms
Execution Time: 37.032 ms

------
Анализ на 1 000 000 записей:
------
HashSetOp Except  (cost=1196.30..1525.96 rows=622 width=17) (actual time=33.264..33.333 rows=311 loops=1)
  ->  Append  (cost=1196.30..1518.58 rows=738 width=17) (actual time=28.451..32.839 rows=507 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=1196.30..1210.30 rows=622 width=17) (actual time=28.450..28.775 rows=409 loops=1)"
              ->  HashAggregate  (cost=1196.30..1204.08 rows=622 width=13) (actual time=28.448..28.687 rows=409 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=0.00..835.54 rows=36076 width=13) (actual time=0.031..13.814 rows=36076 loops=1)
                          ->  Seq Scan on seats s  (cost=0.00..5.11 rows=311 width=12) (actual time=0.012..0.269 rows=311 loops=1)
                          ->  Materialize  (cost=0.00..289.58 rows=116 width=4) (actual time=0.000..0.016 rows=116 loops=311)
                                ->  Seq Scan on tickets t  (cost=0.00..289.00 rows=116 width=4) (actual time=0.014..1.566 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=302.28..304.60 rows=116 width=17) (actual time=3.877..3.989 rows=98 loops=1)"
              ->  Unique  (cost=302.28..303.44 rows=116 width=13) (actual time=3.870..3.951 rows=98 loops=1)
                    ->  Sort  (cost=302.28..302.57 rows=116 width=13) (actual time=3.865..3.900 rows=116 loops=1)
"                          Sort Key: s_1.id, s_1.""row"", s_1.seat"
                          Sort Method: quicksort  Memory: 30kB
                          ->  Hash Join  (cost=9.00..298.30 rows=116 width=13) (actual time=0.261..3.699 rows=116 loops=1)
                                Hash Cond: (t_1.seat_id = s_1.id)
                                ->  Seq Scan on tickets t_1  (cost=0.00..289.00 rows=116 width=4) (actual time=0.048..3.316 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
                                ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.197..0.199 rows=311 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                      ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.019..0.090 rows=311 loops=1)
Planning Time: 0.566 ms
Execution Time: 33.561 ms

Оптимизации: Запрос выполняется менее 0.1 сек. Добавлен индекс tickets(amount,date).

HashSetOp Except  (cost=1196.30..1525.96 rows=622 width=17) (actual time=32.628..32.663 rows=311 loops=1)
  ->  Append  (cost=1196.30..1518.58 rows=738 width=17) (actual time=30.193..32.482 rows=507 loops=1)
"        ->  Subquery Scan on ""*SELECT* 1""  (cost=1196.30..1210.30 rows=622 width=17) (actual time=30.192..30.359 rows=409 loops=1)"
              ->  HashAggregate  (cost=1196.30..1204.08 rows=622 width=13) (actual time=30.191..30.297 rows=409 loops=1)
"                    Group Key: s.id, s.""row"", s.seat, CASE WHEN (s.id = t.seat_id) THEN true ELSE false END"
                    Batches: 1  Memory Usage: 73kB
                    ->  Nested Loop  (cost=0.00..835.54 rows=36076 width=13) (actual time=0.024..15.441 rows=36076 loops=1)
                          ->  Seq Scan on seats s  (cost=0.00..5.11 rows=311 width=12) (actual time=0.008..0.292 rows=311 loops=1)
                          ->  Materialize  (cost=0.00..289.58 rows=116 width=4) (actual time=0.000..0.017 rows=116 loops=311)
                                ->  Seq Scan on tickets t  (cost=0.00..289.00 rows=116 width=4) (actual time=0.012..1.759 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
"        ->  Subquery Scan on ""*SELECT* 2""  (cost=302.28..304.60 rows=116 width=17) (actual time=2.012..2.069 rows=98 loops=1)"
              ->  Unique  (cost=302.28..303.44 rows=116 width=13) (actual time=2.010..2.046 rows=98 loops=1)
                    ->  Sort  (cost=302.28..302.57 rows=116 width=13) (actual time=2.008..2.020 rows=116 loops=1)
"                          Sort Key: s_1.id, s_1.""row"", s_1.seat"
                          Sort Method: quicksort  Memory: 30kB
                          ->  Hash Join  (cost=9.00..298.30 rows=116 width=13) (actual time=0.155..1.959 rows=116 loops=1)
                                Hash Cond: (t_1.seat_id = s_1.id)
                                ->  Seq Scan on tickets t_1  (cost=0.00..289.00 rows=116 width=4) (actual time=0.030..1.620 rows=116 loops=1)
                                      Filter: (((session_id)::text = 'last_samurai_10'::text) AND (date = (CURRENT_DATE + '1 day'::interval)))
                                      Rows Removed by Filter: 9884
                                ->  Hash  (cost=5.11..5.11 rows=311 width=12) (actual time=0.117..0.118 rows=311 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB
                                      ->  Seq Scan on seats s_1  (cost=0.00..5.11 rows=311 width=12) (actual time=0.011..0.062 rows=311 loops=1)
Planning Time: 0.261 ms
Execution Time: 32.816 ms




-- 6. Вывести диапазон минимальной и максимальной цены за билет на конкретный сеанс

SELECT f.name Фильм, ss.timebegin Начало_сеанса, MIN(v.value_float) Мин_цена, MAX(v.value_float) Макс_цена  FROM sessions ss
    JOIN films f ON ss.film_id = f.id
    JOIN values v on f.id = v.film_id AND v.attribute_id LIKE 'seat_price%'
WHERE ss.id = 'last_samurai_10'
GROUP BY f.name, ss.timebegin;

Анализ на 10 000 записей:

GroupAggregate  (cost=13.95..13.98 rows=1 width=104) (actual time=0.155..0.156 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=13.95..13.96 rows=1 width=45) (actual time=0.145..0.146 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.30..13.94 rows=1 width=45) (actual time=0.120..0.133 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.15..10.17 rows=1 width=105) (actual time=0.053..0.059 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.15..8.17 rows=1 width=90) (actual time=0.022..0.024 rows=1 loops=1)
                          Index Cond: ((id)::text = 'last_samurai_10'::text)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.017..0.029 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.034..0.034 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 0.311 ms
Execution Time: 0.291 ms


------
Анализ на 1 000 000 записей:
------

GroupAggregate  (cost=13.95..13.98 rows=1 width=104) (actual time=0.218..0.221 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=13.95..13.96 rows=1 width=45) (actual time=0.159..0.163 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.30..13.94 rows=1 width=45) (actual time=0.140..0.149 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.15..10.17 rows=1 width=105) (actual time=0.124..0.129 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.15..8.17 rows=1 width=90) (actual time=0.030..0.032 rows=1 loops=1)
                          Index Cond: ((id)::text = 'last_samurai_10'::text)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.081..0.090 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.007..0.007 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 0.502 ms
Execution Time: 0.272 ms


Оптимизации: Скорость выполнения запроса менее 0.1 МС.

GroupAggregate  (cost=13.95..13.98 rows=1 width=104) (actual time=0.107..0.108 rows=1 loops=1)
"  Group Key: f.name, ss.timebegin"
  ->  Sort  (cost=13.95..13.96 rows=1 width=45) (actual time=0.097..0.099 rows=2 loops=1)
"        Sort Key: f.name, ss.timebegin"
        Sort Method: quicksort  Memory: 25kB
        ->  Nested Loop  (cost=0.30..13.94 rows=1 width=45) (actual time=0.081..0.089 rows=2 loops=1)
              Join Filter: ((ss.film_id)::text = (f.id)::text)
              ->  Nested Loop  (cost=0.15..10.17 rows=1 width=105) (actual time=0.069..0.073 rows=2 loops=1)
                    Join Filter: ((ss.film_id)::text = (v.film_id)::text)
                    Rows Removed by Join Filter: 8
                    ->  Index Scan using sessions_pkey on sessions ss  (cost=0.15..8.17 rows=1 width=90) (actual time=0.017..0.018 rows=1 loops=1)
                          Index Cond: ((id)::text = 'last_samurai_10'::text)
"                    ->  Seq Scan on ""values"" v  (cost=0.00..1.88 rows=10 width=15) (actual time=0.041..0.050 rows=10 loops=1)"
                          Filter: ((attribute_id)::text ~~ 'seat_price%'::text)
                          Rows Removed by Filter: 60
              ->  Index Scan using films_pkey on films f  (cost=0.15..3.77 rows=1 width=114) (actual time=0.005..0.005 rows=1 loops=2)
                    Index Cond: ((id)::text = (v.film_id)::text)
Planning Time: 0.347 ms
Execution Time: 0.153 ms


-- 7. Cписок (15 значений) самых больших по размеру объектов БД

public.tickets,                     1312 kB,    712 kB
pg_toast.pg_toast_2618,             528 kB,     480 kB
public.tickets_amount_date_idx,     328 kB,     328 kB
public.tickets_pkey,                240 kB,     240 kB
pg_toast.pg_toast_2619,             72 kB,      24 kB
public.seats,                       56 kB,      16 kB
public.orders,                      40 kB,      8192 bytes
public.films,                       32 kB,      8192 bytes
public.film_attributes,             32 kB,      8192 bytes
public.sessions,                    24 kB,      8192 bytes
public.film_attribute_types,        24 kB,      8192 bytes
public.film_attributes_pkey,        16 kB,      16 kB
public.values,                      16 kB,      8192 bytes
public.seats_pkey,                  16 kB,      16 kB
public.films_pkey,                  16 kB,      16 kB

-- 8. Cписки (по 5 значений) самых часто и редко используемых индексов

SELECT relname,indexrelname,idx_scan FROM pg_stat_user_indexes ORDER BY idx_scan DESC LIMIT 5;

sessions,           sessions_pkey,          23006
seats,              seats_pkey,             12008
orders,             orders_payer_key,       11100
films,              films_pkey,             92
film_attributes,    film_attributes_pkey,   70
