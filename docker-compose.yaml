version: '3'

services:
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    image: app/nginx
    container_name: ${NGINX_NAME}
    ports:
      - "8080:80"
    volumes:
      - ./code:/data/hw1.local
      - ./sock:/var/run/
    depends_on:
      - php-fpm
    networks:
      - app-network
  
  php-fpm:
    build:
      context: .
      dockerfile: php-fpm/Dockerfile
    image: app/php
    container_name: ${FPM_NAME}
    volumes:
      - ./code:/data/hw1.local
      - ./sock:/var/run/
    depends_on:
      - postgres
    networks:
      - app-network
  
  postgres:
    image: postgres:17
    container_name: ${DB_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes: 
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
  
  redis:
    command: >
      --requirepass ${REDIS_KEY}
    image: "redis:alpine"
    container_name: redis
    restart: unless-stopped
    networks:
      - app-network
  
  memcache:
    image: memcached:1.6-alpine
    container_name: memcache
    command: memcached -m 64 -o modern
    networks:
      - app-network

volumes:
  pgdata:
    driver: local

networks:
  app-network:
    driver: bridge

