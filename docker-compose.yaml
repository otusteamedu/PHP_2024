# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/data/mysite.local
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
       - ./code:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  memcached:
    image: memcached:latest
    container_name: myapp/memcached
    volumes:
      - ./cache:/var/lib/memcached
    networks:
      - app-network
    stdin_open: true
    tty: true
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: myapp/redis
    volumes:
      - ./redis:/var/lib/redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    networks:
      - app-network

  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    image: myapp/mysql
    container_name: db_mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
    ports:
      - '${INTERFACE}:3306:3306'
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    command: mysqld --user=root --sql-mode=""
    networks:
      - app-network
    stdin_open: true
    tty: true
    restart: unless-stopped

#Docker Networks
networks:
  app-network:
    driver: bridge