# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  balancer:
    build:
      context: ./balancer
      dockerfile: Dockerfile
    image: balancer
    container_name: balancer
    # проброс портов
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - nginx1
      - nginx2

  #контейнер с Nginx1
  nginx1:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx1
    container_name: nginx1
    volumes:
       - ./code:/data/mysite.local
    networks:
      - app-network

  #контейнер с Nginx2
  nginx2:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx2
    container_name: nginx2
    volumes:
       - ./code:/data/mysite.local
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app1:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: balance/php # имя будущего образа
    container_name: app1 # имя контейнера после запуска
    volumes:
       - ./code:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app2:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: balance/php # имя будущего образа
    container_name: app2 # имя контейнера после запуска
    volumes:
      - ./code:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - app-network

  memcached:
    image: memcached:latest
    container_name: memcached
    networks:
      - app-network

  db:
    image: postgres
    container_name: db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - ./db:/var/lib/postgresql/data
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge