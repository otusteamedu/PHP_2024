# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  redis:
    image: redis:latest
    command: ["sh", "-c", "exec redis-server --requirepass \"my-password\""]
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - /dаta_redis:/root/redis
#      - /dаta_redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: balance/nginx
    container_name: nginx
    # проброс портов
    ports:
      - "80:80"
    volumes:
      - ./data:/data/mysite.local
    networks:
      - app-network
  nginx2:
    build:
      context: ./nginx_node
      dockerfile: Dockerfile
    image: balance/nginx
    container_name: nginx2
    volumes:
      - ./data:/data/mysite.local
    networks:
      - app-network
  nginx3:
    build:
      context: ./nginx_node
      dockerfile: Dockerfile
    image: balance/nginx
    container_name: nginx3
    volumes:
      - ./data:/data/mysite.local
    networks:
      - app-network
  #Контейнер с PHP-FPM, назовём его app
  app1:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: balance/php # имя будущего образа
    container_name: app1 # имя контейнера после запуска
    volumes:
      - ./data:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network
  app2:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: balance/php # имя будущего образа
    container_name: app2 # имя контейнера после запуска
    volumes:
      - ./data:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network
#Docker Networks
networks:
  app-network:
    driver: bridge