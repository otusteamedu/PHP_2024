# версия синтаксиса
version: '3.8'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #Контейнер с PHP, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
       - ./code:/var/www/html
       - php-socket:/var/run/php/php-fpm.sock
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #контейне с Nginx
  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
    depends_on:
      - app
    volumes:
       - ./code:/data/mysite.local
       - php-socket:/var/run/php/php-fpm.sock
       - ./nginx/hosts/mysite.local.conf:/etc/nginx/nginx.conf
    networks:
      - app-network

  # контейнер с PostgreSQL
  # строим на базе стандартного образа
  db:
    image: postgres:13
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
    networks:
      - app-network

  #Memcashed
  memcached:
    container_name: memcached
    image: memcached:latest
    ports:
      - "11211:11211"
    networks:
      - app-network

  #Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

#Определение тома
volumes:
  postgresdata:
  php-socket: